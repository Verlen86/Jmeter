<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables ITM QA" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Host" elementType="Argument">
            <stringProp name="Argument.name">Host</stringProp>
            <stringProp name="Argument.value">${__P(stage.host.name,10.1.1.84)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXPECTED_DELIVERIES_COUNT" elementType="Argument">
            <stringProp name="Argument.name">EXPECTED_DELIVERIES_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(expected.deliveries.count, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT_CAPELLA" elementType="Argument">
            <stringProp name="Argument.name">PORT_CAPELLA</stringProp>
            <stringProp name="Argument.value">${__P(port.capella,10080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Threads" elementType="Argument">
            <stringProp name="Argument.name">Threads</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.threads,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Ramp" elementType="Argument">
            <stringProp name="Argument.name">Ramp</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.ramp,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Loop" elementType="Argument">
            <stringProp name="Argument.name">Loop</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIME_FORMAT" elementType="Argument">
            <stringProp name="Argument.name">TIME_FORMAT</stringProp>
            <stringProp name="Argument.value">${__time(d-MMM-yyyy hh:mm:ss)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENV" elementType="Argument">
            <stringProp name="Argument.name">ENV</stringProp>
            <stringProp name="Argument.value">QA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">http://o-twm-qa.tw.intra:10080/testTFShpr/qa/incoming</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Companies &amp; References ITM QA" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SH_COMP_NAME" elementType="Argument">
            <stringProp name="Argument.name">SH_COMP_NAME</stringProp>
            <stringProp name="Argument.value">ITM-QA-HQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CR_COMP_NAME" elementType="Argument">
            <stringProp name="Argument.name">CR_COMP_NAME</stringProp>
            <stringProp name="Argument.value">ITM-QA-Carrier-0001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SH_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">SH_LOGIN</stringProp>
            <stringProp name="Argument.value">ITM-QA-HQu</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CR_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">CR_LOGIN</stringProp>
            <stringProp name="Argument.value">ITM-QA-Carrier-0001u</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="______________________________________________________________" elementType="Argument">
            <stringProp name="Argument.name">______________________________________________________________</stringProp>
            <stringProp name="Argument.value">______________________________________________________________</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ORIGIN_REF" elementType="Argument">
            <stringProp name="Argument.name">ORIGIN_REF</stringProp>
            <stringProp name="Argument.value">ITM-QA-Sender-0002-AddressRef</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DESTINATION_REF" elementType="Argument">
            <stringProp name="Argument.name">DESTINATION_REF</stringProp>
            <stringProp name="Argument.value">ITM-QA-WH1-DelRef</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTH_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">AUTH_TOKEN</stringProp>
            <stringProp name="Argument.value">Basic aXRtOml0bQ==</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">/itm/incoming</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PLUS_DAYS" elementType="Argument">
            <stringProp name="Argument.name">PLUS_DAYS</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MIKAD_AUTH_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">MIKAD_AUTH_TOKEN</stringProp>
            <stringProp name="Argument.value">Basic dHdDb3N0UUE6WmVlbGFlM2JlNw==</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GROUP_NAME" elementType="Argument">
            <stringProp name="Argument.name">GROUP_NAME</stringProp>
            <stringProp name="Argument.value">intermarche</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables ITM Sprint" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Host" elementType="Argument">
            <stringProp name="Argument.name">Host</stringProp>
            <stringProp name="Argument.value">${__P(stage.host.name,o-twm-qa.tw.intra)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXPECTED_DELIVERIES_COUNT" elementType="Argument">
            <stringProp name="Argument.name">EXPECTED_DELIVERIES_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(expected.deliveries.count, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT_CAPELLA" elementType="Argument">
            <stringProp name="Argument.name">PORT_CAPELLA</stringProp>
            <stringProp name="Argument.value">${__P(port.capella,10080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Threads" elementType="Argument">
            <stringProp name="Argument.name">Threads</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.threads,3000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Ramp" elementType="Argument">
            <stringProp name="Argument.name">Ramp</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.ramp,300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Loop" elementType="Argument">
            <stringProp name="Argument.name">Loop</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIME_FORMAT" elementType="Argument">
            <stringProp name="Argument.name">TIME_FORMAT</stringProp>
            <stringProp name="Argument.value">${__time(d-MMM-yyyy hh:mm:ss)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENV" elementType="Argument">
            <stringProp name="Argument.name">ENV</stringProp>
            <stringProp name="Argument.value">Sprint</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">http://o-twm-qa.tw.intra:10080/testTFShpr/qa/incoming</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Companies &amp; References ITM Sprint" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SH_COMP_NAME" elementType="Argument">
            <stringProp name="Argument.name">SH_COMP_NAME</stringProp>
            <stringProp name="Argument.value">ITM-Sprint-HQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CR_COMP_NAME" elementType="Argument">
            <stringProp name="Argument.name">CR_COMP_NAME</stringProp>
            <stringProp name="Argument.value">ITM-Sprint-Carrier-0001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SH_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">SH_LOGIN</stringProp>
            <stringProp name="Argument.value">ITM-Sprint-HQu</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CR_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">CR_LOGIN</stringProp>
            <stringProp name="Argument.value">ITM-Sprint-Carrier-0001u</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="______________________________________________________________" elementType="Argument">
            <stringProp name="Argument.name">______________________________________________________________</stringProp>
            <stringProp name="Argument.value">______________________________________________________________</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ORIGIN_REF" elementType="Argument">
            <stringProp name="Argument.name">ORIGIN_REF</stringProp>
            <stringProp name="Argument.value">ITM-Sprint-Sender-0001-ARef</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DESTINATION_REF" elementType="Argument">
            <stringProp name="Argument.name">DESTINATION_REF</stringProp>
            <stringProp name="Argument.value">ITM-Sprint-WH1-DelRef</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTH_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">AUTH_TOKEN</stringProp>
            <stringProp name="Argument.value">Basic aW50ZXJtYXJjaGU6aW50ZXJtYXJjaGUxMjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">/itm/sprint/incoming</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PLUS_DAYS" elementType="Argument">
            <stringProp name="Argument.name">PLUS_DAYS</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables ITM Stage" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Host" elementType="Argument">
            <stringProp name="Argument.name">Host</stringProp>
            <stringProp name="Argument.value">${__P(stage.host.name,10.194.34.9)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXPECTED_DELIVERIES_COUNT" elementType="Argument">
            <stringProp name="Argument.name">EXPECTED_DELIVERIES_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(expected.deliveries.count, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT_CAPELLA" elementType="Argument">
            <stringProp name="Argument.name">PORT_CAPELLA</stringProp>
            <stringProp name="Argument.value">${__P(port.capella,10080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Threads" elementType="Argument">
            <stringProp name="Argument.name">Threads</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.threads,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Ramp" elementType="Argument">
            <stringProp name="Argument.name">Ramp</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.ramp,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Loop" elementType="Argument">
            <stringProp name="Argument.name">Loop</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIME_FORMAT" elementType="Argument">
            <stringProp name="Argument.name">TIME_FORMAT</stringProp>
            <stringProp name="Argument.value">${__time(d-MMM-yyyy hh:mm:ss)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENV" elementType="Argument">
            <stringProp name="Argument.name">ENV</stringProp>
            <stringProp name="Argument.value">Stage</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NAME" elementType="Argument">
            <stringProp name="Argument.name">NAME</stringProp>
            <stringProp name="Argument.value">Stg2104</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">http://o-twm-qa.tw.intra:10080/testTFShpr/qa/incoming</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Companies &amp; References ITM Stage" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SH_COMP_NAME" elementType="Argument">
            <stringProp name="Argument.name">SH_COMP_NAME</stringProp>
            <stringProp name="Argument.value">ITM-${NAME}-HQ</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CR_COMP_NAME" elementType="Argument">
            <stringProp name="Argument.name">CR_COMP_NAME</stringProp>
            <stringProp name="Argument.value">ITM-${NAME}-Carrier-0002</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SH_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">SH_LOGIN</stringProp>
            <stringProp name="Argument.value">ITM-${NAME}-HQu</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CR_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">CR_LOGIN</stringProp>
            <stringProp name="Argument.value">ITM-${NAME}-Carrier-0002u</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="______________________________________________________________" elementType="Argument">
            <stringProp name="Argument.name">______________________________________________________________</stringProp>
            <stringProp name="Argument.value">______________________________________________________________</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ORIGIN_REF" elementType="Argument">
            <stringProp name="Argument.name">ORIGIN_REF</stringProp>
            <stringProp name="Argument.value">ITM-${NAME}-Sender-0009-ARef</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DESTINATION_REF" elementType="Argument">
            <stringProp name="Argument.name">DESTINATION_REF</stringProp>
            <stringProp name="Argument.value">ITM-${NAME}-WH1-DelRef</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTH_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">AUTH_TOKEN</stringProp>
            <stringProp name="Argument.value">Basic aW50ZXJtYXJjaGU6aW50ZXJtYXJjaGU=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">/itm/incoming</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PLUS_DAYS" elementType="Argument">
            <stringProp name="Argument.name">PLUS_DAYS</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MIKAD_AUTH_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">MIKAD_AUTH_TOKEN</stringProp>
            <stringProp name="Argument.value">Basic dHdDb3N0UUE6WmVlbGFlM2JlNw==</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GROUP_NAME" elementType="Argument">
            <stringProp name="Argument.name">GROUP_NAME</stringProp>
            <stringProp name="Argument.value">intermarche</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Stage for TWA Tests" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Host" elementType="Argument">
            <stringProp name="Argument.name">Host</stringProp>
            <stringProp name="Argument.value">${__P(stage.host.name,10.194.34.9)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXPECTED_DELIVERIES_COUNT" elementType="Argument">
            <stringProp name="Argument.name">EXPECTED_DELIVERIES_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(expected.deliveries.count, 5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT_CAPELLA" elementType="Argument">
            <stringProp name="Argument.name">PORT_CAPELLA</stringProp>
            <stringProp name="Argument.value">${__P(port.capella,10080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Threads" elementType="Argument">
            <stringProp name="Argument.name">Threads</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.threads,7)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Ramp" elementType="Argument">
            <stringProp name="Argument.name">Ramp</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.ramp,2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Loop" elementType="Argument">
            <stringProp name="Argument.name">Loop</stringProp>
            <stringProp name="Argument.value">${__P(normal.calloffs.loop,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIME_FORMAT" elementType="Argument">
            <stringProp name="Argument.name">TIME_FORMAT</stringProp>
            <stringProp name="Argument.value">${__time(d-MMM-yyyy hh:mm:ss)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENV" elementType="Argument">
            <stringProp name="Argument.name">ENV</stringProp>
            <stringProp name="Argument.value">Stage</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NAME" elementType="Argument">
            <stringProp name="Argument.name">NAME</stringProp>
            <stringProp name="Argument.value">Stg2101</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">http://o-twm-qa.tw.intra:10080/testTFShpr/qa/incoming</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Companies &amp; References Stage for TWA Tests" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SH_COMP_NAME" elementType="Argument">
            <stringProp name="Argument.name">SH_COMP_NAME</stringProp>
            <stringProp name="Argument.value">mqa_slot_prd_sh1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CR_COMP_NAME" elementType="Argument">
            <stringProp name="Argument.name">CR_COMP_NAME</stringProp>
            <stringProp name="Argument.value">mqa_slot_prd_lp1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SH_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">SH_LOGIN</stringProp>
            <stringProp name="Argument.value">mqa_slot_prd_sh1a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CR_LOGIN" elementType="Argument">
            <stringProp name="Argument.name">CR_LOGIN</stringProp>
            <stringProp name="Argument.value">mqa_slot_prd_lp1a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="______________________________________________________________" elementType="Argument">
            <stringProp name="Argument.name">______________________________________________________________</stringProp>
            <stringProp name="Argument.value">______________________________________________________________</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ORIGIN_REF" elementType="Argument">
            <stringProp name="Argument.name">ORIGIN_REF</stringProp>
            <stringProp name="Argument.value">mqa_slot_prd_sh1-Aref</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DESTINATION_REF" elementType="Argument">
            <stringProp name="Argument.name">DESTINATION_REF</stringProp>
            <stringProp name="Argument.value">mqa_slot_prd_sh1-Bref</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTH_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">AUTH_TOKEN</stringProp>
            <stringProp name="Argument.value">Basic YWFUV1NoaXBwZXI6NnRURnNfcHN3cmQ5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">/aaTWShipper/incoming</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PLUS_DAYS" elementType="Argument">
            <stringProp name="Argument.name">PLUS_DAYS</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Naming" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="FILENAME" elementType="Argument">
            <stringProp name="Argument.name">FILENAME</stringProp>
            <stringProp name="Argument.value">${ENV}/${__time(yyyy)}/${__time(MM)}/${Threads}_COs_${EXPECTED_DELIVERIES_COUNT}del_${PLUS_DAYS}days</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COREF_CALC_FILENAME" elementType="Argument">
            <stringProp name="Argument.name">COREF_CALC_FILENAME</stringProp>
            <stringProp name="Argument.value">QA_04-01-2021_01-36_10_COs_40del_20days</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">http://o-twm-qa.tw.intra:10080/testTFShpr/qa/incoming</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Files Naming" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="COref_DELref_LOCref" elementType="Argument">
            <stringProp name="Argument.name">COref_DELref_LOCref</stringProp>
            <stringProp name="Argument.value">D:/Generated Data/${FILENAME}_FULL.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COref" elementType="Argument">
            <stringProp name="Argument.name">COref</stringProp>
            <stringProp name="Argument.value">D:/Generated Data/${FILENAME}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COrefLog" elementType="Argument">
            <stringProp name="Argument.name">COrefLog</stringProp>
            <stringProp name="Argument.value">D:/JTLReports/${FILENAME}.jtl</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CO_REF_LIST" elementType="Argument">
            <stringProp name="Argument.name">CO_REF_LIST</stringProp>
            <stringProp name="Argument.value">D:/Generated Data/${COREF_CALC_FILENAME}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATE_FILE_LOCATION" elementType="Argument">
            <stringProp name="Argument.name">DATE_FILE_LOCATION</stringProp>
            <stringProp name="Argument.value">D:/Generated Data/${ENV}_CO_DATE_LOCATION.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">http://o-twm-qa.tw.intra:10080/testTFShpr/qa/incoming</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Calculation configuration" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Ramp_for_calculation" elementType="Argument">
            <stringProp name="Argument.name">Ramp_for_calculation</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CO_ref_w_cr_time" elementType="Argument">
            <stringProp name="Argument.name">CO_ref_w_cr_time</stringProp>
            <stringProp name="Argument.value">D:/Generated Data/${COREF_CALC_FILENAME}_creation_time.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugPostProcessor>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">${COrefLog}</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Calloffs_creation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${Loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Ramp}</stringProp>
        <longProp name="ThreadGroup.start_time">1514284694000</longProp>
        <longProp name="ThreadGroup.end_time">1514284694000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create_calloff" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_XML_INCOMING" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;TransportOrder&gt;&#xd;
  &lt;version&gt;V15&lt;/version&gt;&#xd;
  &lt;contact&gt;&#xd;
    &lt;firstName&gt;user&lt;/firstName&gt;&#xd;
    &lt;lastName&gt;${SH_LOGIN}&lt;/lastName&gt;&#xd;
  &lt;/contact&gt;&#xd;
  &lt;action&gt;CREATE&lt;/action&gt;&#xd;
  &lt;calloffData&gt;&#xd;
  &lt;express&gt;${Express}&lt;/express&gt;&#xd;
    &lt;calloffRef&gt;${CONAME}&lt;/calloffRef&gt;&#xd;
    &lt;shipper&gt;&#xd;
      &lt;ref&gt;${SH_COMP_NAME}ref&lt;/ref&gt;&#xd;
      &lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&#xd;
      &lt;contact&gt;&#xd;
        &lt;firstName&gt;user-${SH_LOGIN}&lt;/firstName&gt;&#xd;
        &lt;lastName&gt;${SH_LOGIN}&lt;/lastName&gt;&#xd;
      &lt;/contact&gt;&#xd;
    &lt;/shipper&gt;&#xd;
    &lt;carrier&gt;&#xd;
       &lt;ref&gt;${CR_COMP_NAME}ref&lt;/ref&gt;&#xd;
      &lt;name&gt;${CR_COMP_NAME}&lt;/name&gt;&#xd;
    &lt;/carrier&gt;&#xd;
    &lt;transport&gt;&#xd;
      &lt;origin&gt;&#xd;
        &lt;party&gt;&#xd;
          &lt;ref&gt;${ORIGIN_REF}&lt;/ref&gt;&#xd;
          &lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&#xd;
          &lt;address&gt;&#xd;
            &lt;name&gt;pick-up&lt;/name&gt;&#xd;
            &lt;city&gt;City1&lt;/city&gt;&#xd;
            &lt;country&gt;BE&lt;/country&gt;&#xd;
          &lt;/address&gt;&#xd;
        &lt;/party&gt;&#xd;
        &lt;timing&gt;&#xd;
          &lt;latest&gt;${PU_DATE}&lt;/latest&gt;&#xd;
        &lt;/timing&gt;&#xd;
      &lt;/origin&gt;&#xd;
      &lt;destination&gt;&#xd;
        &lt;party&gt;&#xd;
          &lt;ref&gt;${DESTINATION_REF}&lt;/ref&gt;&#xd;
          &lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&#xd;
          &lt;address&gt;&#xd;
            &lt;name&gt;delivery&lt;/name&gt;&#xd;
            &lt;city&gt;City1&lt;/city&gt;&#xd;
            &lt;country&gt;BE&lt;/country&gt;&#xd;
          &lt;/address&gt;&#xd;
        &lt;/party&gt;&#xd;
        &lt;timing&gt;&#xd;
          &lt;latest&gt;${DL_DATE}&lt;/latest&gt;&#xd;
        &lt;/timing&gt;&#xd;
      &lt;/destination&gt;&#xd;
      &lt;medium&gt;ROAD&lt;/medium&gt;&#xd;
    &lt;/transport&gt;&#xd;
    &lt;goods&gt;&#xd;
      &lt;description&gt;description&lt;/description&gt;&#xd;
      &lt;bulk&gt;false&lt;/bulk&gt;&#xd;
      &lt;totalGrossWeight&gt;&#xd;
        &lt;quantity&gt;1&lt;/quantity&gt;&#xd;
        &lt;unit&gt;kg&lt;/unit&gt;&#xd;
      &lt;/totalGrossWeight&gt;&#xd;
    &lt;/goods&gt;&#xd;
    &lt;contractRef&gt;${CONAME}&lt;/contractRef&gt;&#xd;
    &lt;loadData&gt;&#xd;
      &lt;twLoad&gt;true&lt;/twLoad&gt;&#xd;
      &lt;mainMeasure type=&quot;NUMBER_OF_PALLETS&quot;/&gt;&#xd;
      ${DELIVERIES}    &#xd;
    &lt;/loadData&gt;&#xd;
  &lt;/calloffData&gt;&#xd;
&lt;/TransportOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_CAPELLA}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">address-ref-${CR_LOGIN}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Random express/non-express" enabled="true">
              <stringProp name="filename">D:\test_data\express.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="variableNames">Express</stringProp>
              <boolProp name="randomOrder">true</boolProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="rewindOnTheEndOfList">true</boolProp>
              <boolProp name="independentListPerThread">false</boolProp>
            </com.blazemeter.jmeter.RandomCSVDataSetConfig>
            <hashTree/>
            <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Random PRODUCT TYPE" enabled="true">
              <stringProp name="filename">D:\test_data\LotRef.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="variableNames">PRODUCT</stringProp>
              <boolProp name="randomOrder">true</boolProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="rewindOnTheEndOfList">true</boolProp>
              <boolProp name="independentListPerThread">false</boolProp>
            </com.blazemeter.jmeter.RandomCSVDataSetConfig>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.time.DateUtils;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.commons.lang3.RandomStringUtils;

Date date = new Date();
date.setDate(date.getDate());

SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&quot;);
SimpleDateFormat file_format = new SimpleDateFormat(&quot;yyyy,MM,dd&quot;);

date = DateUtils.addDays(date,${PLUS_DAYS});
date = DateUtils.setHours(date, 2 + (int) (Math.random() * 22));
date = DateUtils.setMinutes(date, 0 +(int) (Math.random() * 60));

vars.put(&quot;PU_DATE&quot;, df.format(date));
date = DateUtils.addDays(date,1);
vars.put(&quot;DL_DATE&quot;, df.format(date));

//vars.put(&quot;SH_COMP_NAME&quot;,&quot;ITM-QA-HQ&quot;);
//vars.put(&quot;CR_COMP_NAME&quot;,&quot;ITM-QA-Carrier-0001&quot;);
vars.put(&quot;SH_LOGIN&quot;,&quot;${SH_LOGIN}&quot;);
vars.put(&quot;CR_LOGIN&quot;,&quot;${CR_LOGIN}&quot;);
vars.put(&quot;CONAME&quot;, &quot;${__time(,)}&quot;+RandomStringUtils.randomAlphanumeric(3).toUpperCase(Locale.US)+&quot;${__threadNum}&quot;);
props.put(&quot;property&quot;+&quot;_&quot;+${__threadNum}+&quot;_&quot;+String.valueOf(vars.getIteration()), vars.get(&quot;CONAME&quot;));

f = new FileOutputStream(&quot;${DATE_FILE_LOCATION}&quot;, false);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
vars.put(&quot;FILE_DATE&quot;, file_format.format(date));
print(vars.get(&quot;FILE_DATE&quot;));
f.close();</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

int N = ${EXPECTED_DELIVERIES_COUNT};

f = new FileOutputStream(&quot;${COref_DELref_LOCref}&quot;, true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

String S = &quot;&quot;;
String X = &quot;&quot;;

StringBuilder sb = new StringBuilder();

String DNAME = &quot;${__time(,)}&quot;+RandomStringUtils.randomAlphanumeric(3).toUpperCase(Locale.US)+&quot;${__threadNum}&quot;;
for (int j = 1; j&lt;=1; j++)
{
	X=X+&quot;&lt;product&gt;&lt;description&gt;description&lt;/description&gt;${PRODUCT}&lt;grossWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/grossWeight&gt;&lt;/product&gt;&quot;;
}
for (int i = 1; i&lt;=N; i++)
{
sb.append(vars.get(&quot;CONAME&quot;));
sb.append(&quot;,&quot;);
S=S+&quot;&lt;deliveryData&gt;&lt;deliveryRef&gt;&quot;+DNAME+String.valueOf(i)+&quot;&lt;/deliveryRef&gt;&lt;shipper&gt;&lt;ref&gt;${SH_COMP_NAME}ref&lt;/ref&gt;&lt;name&gt;${CR_COMP_NAME}&lt;/name&gt;&lt;contact&gt;&lt;firstName&gt;user&lt;/firstName&gt;&lt;lastName&gt;${SH_LOGIN}&lt;/lastName&gt;&lt;/contact&gt;&lt;/shipper&gt;&lt;trip&gt;&lt;origin&gt;&lt;party&gt;&lt;ref&gt;${ORIGIN_REF}&lt;/ref&gt;&lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&lt;address&gt;&lt;name&gt;delivery-multy_address&lt;/name&gt;&lt;city&gt;City4&lt;/city&gt;&lt;country&gt;BE&lt;/country&gt;&lt;/address&gt;&lt;/party&gt;&lt;timing&gt;&lt;latest&gt;${PU_DATE}&lt;/latest&gt;&lt;/timing&gt;&lt;/origin&gt;&lt;destination&gt;&lt;party&gt;&lt;ref&gt;${DESTINATION_REF}&lt;/ref&gt;&lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&lt;address&gt;&lt;name&gt;delivery-multy_address&lt;/name&gt;&lt;city&gt;City4&lt;/city&gt;&lt;country&gt;BE&lt;/country&gt;&lt;/address&gt;&lt;/party&gt;&lt;timing&gt;&lt;latest&gt;${DL_DATE}&lt;/latest&gt;&lt;/timing&gt;&lt;/destination&gt;&lt;/trip&gt;&lt;order&gt;&lt;description&gt;description&lt;/description&gt;&lt;bulk&gt;false&lt;/bulk&gt;&lt;totalGrossWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/totalGrossWeight&gt;&lt;totalPallets&gt;1&lt;/totalPallets&gt;&lt;totalNetWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/totalNetWeight&gt;&lt;totalVolume&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;m3&lt;/unit&gt;&lt;/totalVolume&gt;&quot;+X+&quot;&lt;/order&gt;&lt;/deliveryData&gt;&quot;;
sb.append(DNAME+String.valueOf(i));
sb.append(&quot;,&quot;);
sb.append(vars.get(&quot;DESTINATION_REF&quot;));
if (i!=N) sb.append(&quot;\n&quot;);
}
print(sb);
f.close();

f1 = new FileOutputStream(&quot;${COref}&quot;, true);
p1 = new PrintStream(f1); 
this.interpreter.setOut(p1);

StringBuilder sb1 = new StringBuilder();
sb1.append(vars.get(&quot;CONAME&quot;));
print(sb1);
f1.close();

vars.put(&quot;DELVS_C&quot;, String.valueOf(N)); 
vars.put(&quot;DNAME&quot;, DNAME);
vars.put(&quot;DELIVERIES&quot;, S);
vars.put(&quot;ACTIVE&quot;,&quot;true&quot;);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor OLD" enabled="false">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

int N = ${EXPECTED_DELIVERIES_COUNT};

f = new FileOutputStream(&quot;D://1callofs23.csv&quot;, true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

String S = &quot;&quot;;
String X = &quot;&quot;;

StringBuilder sb = new StringBuilder();

String DNAME = &quot;${__time(,)}&quot;+RandomStringUtils.randomAlphanumeric(3).toUpperCase(Locale.US)+&quot;${__threadNum}&quot;;
for (int j = 1; j&lt;=N; j++)
{
	X=X+&quot;&lt;product&gt;&lt;description&gt;description&lt;/description&gt;&lt;reference&gt;reference&lt;/reference&gt;&lt;grossWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/grossWeight&gt;&lt;/product&gt;&quot;;
}
for (int i = 1; i&lt;=N; i++)
{
sb.append(vars.get(&quot;CONAME&quot;));
sb.append(&quot;,&quot;);
S=S+&quot;&lt;deliveryData&gt;&lt;deliveryRef&gt;&quot;+DNAME+String.valueOf(i)+&quot;&lt;/deliveryRef&gt;&lt;shipper&gt;&lt;ref&gt;${SH_COMP_NAME}ref&lt;/ref&gt;&lt;name&gt;${CR_COMP_NAME}&lt;/name&gt;&lt;contact&gt;&lt;firstName&gt;user&lt;/firstName&gt;&lt;lastName&gt;${SH_LOGIN}&lt;/lastName&gt;&lt;/contact&gt;&lt;/shipper&gt;&lt;trip&gt;&lt;origin&gt;&lt;party&gt;&lt;ref&gt;ITM-QA-Sender-0002-AddressRef&lt;/ref&gt;&lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&lt;address&gt;&lt;name&gt;delivery-multy_address&lt;/name&gt;&lt;city&gt;City4&lt;/city&gt;&lt;country&gt;BE&lt;/country&gt;&lt;/address&gt;&lt;/party&gt;&lt;timing&gt;&lt;latest&gt;${PU_DATE}&lt;/latest&gt;&lt;/timing&gt;&lt;/origin&gt;&lt;destination&gt;&lt;party&gt;&lt;ref&gt;ITM-QA-WH1-DelRef&lt;/ref&gt;&lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&lt;address&gt;&lt;name&gt;delivery-multy_address&lt;/name&gt;&lt;city&gt;City4&lt;/city&gt;&lt;country&gt;BE&lt;/country&gt;&lt;/address&gt;&lt;/party&gt;&lt;timing&gt;&lt;latest&gt;${DL_DATE}&lt;/latest&gt;&lt;/timing&gt;&lt;/destination&gt;&lt;/trip&gt;&lt;order&gt;&lt;description&gt;description&lt;/description&gt;&lt;bulk&gt;false&lt;/bulk&gt;&lt;totalGrossWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/totalGrossWeight&gt;&lt;totalNetWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/totalNetWeight&gt;&lt;totalVolume&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;m3&lt;/unit&gt;&lt;/totalVolume&gt;&quot;+X+&quot;&lt;/order&gt;&lt;/deliveryData&gt;&quot;;
sb.append(DNAME+String.valueOf(i));
if (i!=N) sb.append(&quot;\n&quot;);
}
print(sb);
f.close();
vars.put(&quot;DELVS_C&quot;, String.valueOf(N)); 
vars.put(&quot;DNAME&quot;, DNAME);
vars.put(&quot;DELIVERIES&quot;, S);
vars.put(&quot;ACTIVE&quot;,&quot;true&quot;);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${Host}:${PORT_CAPELLA}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${AUTH_TOKEN}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_XML_INCOMING" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;acceptance_status&gt;&#xd;
  &lt;version&gt;V13&lt;/version&gt;&#xd;
  &lt;contact&gt;&#xd;
    &lt;firstName&gt;user&lt;/firstName&gt;&#xd;
    &lt;lastName&gt;${CR_LOGIN}&lt;/lastName&gt;&#xd;
  &lt;/contact&gt;&#xd;
  &lt;action&gt;ACCEPT&lt;/action&gt;&#xd;
  &lt;medium&gt;ROAD&lt;/medium&gt;&#xd;
  &lt;calloffData&gt;&#xd;
    &lt;shipper&gt;&#xd;
      &lt;ref&gt;shipper-${SH_LOGIN}&lt;/ref&gt;&#xd;
      &lt;name&gt;${SH_LOGIN}&lt;/name&gt;&#xd;
    &lt;/shipper&gt;&#xd;
    &lt;carrier&gt;&#xd;
      &lt;ref&gt;carrier-${CR_LOGIN}&lt;/ref&gt;&#xd;
      &lt;name&gt;${CR_LOGIN}&lt;/name&gt;&#xd;
    &lt;/carrier&gt;&#xd;
    &lt;calloffRef&gt;${CONAME}&lt;/calloffRef&gt;&#xd;
  &lt;/calloffData&gt;&#xd;
&lt;/acceptance_status&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_CAPELLA}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/slotv2Carr/incoming</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${Host}:${PORT_CAPELLA}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c2xvdHYyQ2Fycjp0cmFuc3dpZGU=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Calloffs_creation 2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${Loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Ramp}</stringProp>
        <longProp name="ThreadGroup.start_time">1514284694000</longProp>
        <longProp name="ThreadGroup.end_time">1514284694000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay">1500</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create_calloff" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_XML_INCOMING" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;TransportOrder&gt;&#xd;
  &lt;version&gt;V15&lt;/version&gt;&#xd;
  &lt;contact&gt;&#xd;
    &lt;firstName&gt;user&lt;/firstName&gt;&#xd;
    &lt;lastName&gt;${SH_LOGIN}&lt;/lastName&gt;&#xd;
  &lt;/contact&gt;&#xd;
  &lt;action&gt;CREATE&lt;/action&gt;&#xd;
  &lt;calloffData&gt;&#xd;
  &lt;express&gt;${Express}&lt;/express&gt;&#xd;
    &lt;calloffRef&gt;${CONAME}&lt;/calloffRef&gt;&#xd;
    &lt;shipper&gt;&#xd;
      &lt;ref&gt;${SH_COMP_NAME}ref&lt;/ref&gt;&#xd;
      &lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&#xd;
      &lt;contact&gt;&#xd;
        &lt;firstName&gt;user-${SH_LOGIN}&lt;/firstName&gt;&#xd;
        &lt;lastName&gt;${SH_LOGIN}&lt;/lastName&gt;&#xd;
      &lt;/contact&gt;&#xd;
    &lt;/shipper&gt;&#xd;
    &lt;carrier&gt;&#xd;
       &lt;ref&gt;${CR_COMP_NAME}ref&lt;/ref&gt;&#xd;
      &lt;name&gt;${CR_COMP_NAME}&lt;/name&gt;&#xd;
    &lt;/carrier&gt;&#xd;
    &lt;transport&gt;&#xd;
      &lt;origin&gt;&#xd;
        &lt;party&gt;&#xd;
          &lt;ref&gt;ITM-QA-Sender-0002-AddressRef&lt;/ref&gt;&#xd;
          &lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&#xd;
          &lt;address&gt;&#xd;
            &lt;name&gt;pick-up&lt;/name&gt;&#xd;
            &lt;city&gt;City1&lt;/city&gt;&#xd;
            &lt;country&gt;BE&lt;/country&gt;&#xd;
          &lt;/address&gt;&#xd;
        &lt;/party&gt;&#xd;
        &lt;timing&gt;&#xd;
          &lt;latest&gt;${PU_DATE}&lt;/latest&gt;&#xd;
        &lt;/timing&gt;&#xd;
      &lt;/origin&gt;&#xd;
      &lt;destination&gt;&#xd;
        &lt;party&gt;&#xd;
          &lt;ref&gt;ITM-QA-WH1-DelRef&lt;/ref&gt;&#xd;
          &lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&#xd;
          &lt;address&gt;&#xd;
            &lt;name&gt;delivery&lt;/name&gt;&#xd;
            &lt;city&gt;City1&lt;/city&gt;&#xd;
            &lt;country&gt;BE&lt;/country&gt;&#xd;
          &lt;/address&gt;&#xd;
        &lt;/party&gt;&#xd;
        &lt;timing&gt;&#xd;
          &lt;latest&gt;${DL_DATE}&lt;/latest&gt;&#xd;
        &lt;/timing&gt;&#xd;
      &lt;/destination&gt;&#xd;
      &lt;medium&gt;ROAD&lt;/medium&gt;&#xd;
    &lt;/transport&gt;&#xd;
    &lt;goods&gt;&#xd;
      &lt;description&gt;description&lt;/description&gt;&#xd;
      &lt;bulk&gt;false&lt;/bulk&gt;&#xd;
      &lt;totalGrossWeight&gt;&#xd;
        &lt;quantity&gt;1&lt;/quantity&gt;&#xd;
        &lt;unit&gt;kg&lt;/unit&gt;&#xd;
      &lt;/totalGrossWeight&gt;&#xd;
    &lt;/goods&gt;&#xd;
    &lt;contractRef&gt;${CONAME}&lt;/contractRef&gt;&#xd;
    &lt;loadData&gt;&#xd;
      &lt;twLoad&gt;true&lt;/twLoad&gt;&#xd;
      &lt;mainMeasure type=&quot;NUMBER_OF_PALLETS&quot;/&gt;&#xd;
      ${DELIVERIES}    &#xd;
    &lt;/loadData&gt;&#xd;
  &lt;/calloffData&gt;&#xd;
&lt;/TransportOrder&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_CAPELLA}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/itm/incoming</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">address-ref-${CR_LOGIN}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="true">
              <stringProp name="filename">D:\test_data\express.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="variableNames">Express</stringProp>
              <boolProp name="randomOrder">true</boolProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="rewindOnTheEndOfList">true</boolProp>
              <boolProp name="independentListPerThread">false</boolProp>
            </com.blazemeter.jmeter.RandomCSVDataSetConfig>
            <hashTree/>
            <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="Random PRODUCT TYPE" enabled="true">
              <stringProp name="filename">D:\test_data\LotRef.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="variableNames">PRODUCT</stringProp>
              <boolProp name="randomOrder">true</boolProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="rewindOnTheEndOfList">true</boolProp>
              <boolProp name="independentListPerThread">false</boolProp>
            </com.blazemeter.jmeter.RandomCSVDataSetConfig>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.time.DateUtils;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.commons.lang3.RandomStringUtils;

Date date = new Date();
date.setDate(date.getDate());

SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssXXX&quot;);

date = DateUtils.addDays(date,20);
date = DateUtils.setHours(date, 2 + (int) (Math.random() * 22));
date = DateUtils.setMinutes(date, 0 +(int) (Math.random() *60));

vars.put(&quot;PU_DATE&quot;, df.format(date));
date = DateUtils.addDays(date,1);
vars.put(&quot;DL_DATE&quot;, df.format(date));

vars.put(&quot;SH_COMP_NAME&quot;,&quot;ITM-QA-HQ&quot;);
vars.put(&quot;CR_COMP_NAME&quot;,&quot;ITM-QA-Carrier-0001&quot;);
vars.put(&quot;SH_LOGIN&quot;,&quot;ITM-QA-HQu&quot;);
vars.put(&quot;CR_LOGIN&quot;,&quot;ITM-QA-Carrier-0001u&quot;);
vars.put(&quot;CONAME&quot;, &quot;${__time(,)}&quot;+RandomStringUtils.randomAlphanumeric(3).toUpperCase(Locale.US)+&quot;${__threadNum}&quot;);
props.put(&quot;property&quot;+&quot;_&quot;+${__threadNum}+&quot;_&quot;+String.valueOf(vars.getIteration()), vars.get(&quot;CONAME&quot;));</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

int N = ${EXPECTED_DELIVERIES_COUNT};

f = new FileOutputStream(&quot;${COref_DELref_LOCref2}&quot;, true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

String S = &quot;&quot;;
String X = &quot;&quot;;

StringBuilder sb = new StringBuilder();

String DNAME = &quot;${__time(,)}&quot;+RandomStringUtils.randomAlphanumeric(3).toUpperCase(Locale.US)+&quot;${__threadNum}&quot;;
for (int j = 1; j&lt;=1; j++)
{
	X=X+&quot;&lt;product&gt;&lt;description&gt;description&lt;/description&gt;${PRODUCT}&lt;grossWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/grossWeight&gt;&lt;/product&gt;&quot;;
}
for (int i = 1; i&lt;=N; i++)
{
sb.append(vars.get(&quot;CONAME&quot;));
sb.append(&quot;,&quot;);
S=S+&quot;&lt;deliveryData&gt;&lt;deliveryRef&gt;&quot;+DNAME+String.valueOf(i)+&quot;&lt;/deliveryRef&gt;&lt;shipper&gt;&lt;ref&gt;${SH_COMP_NAME}ref&lt;/ref&gt;&lt;name&gt;${CR_COMP_NAME}&lt;/name&gt;&lt;contact&gt;&lt;firstName&gt;user&lt;/firstName&gt;&lt;lastName&gt;${SH_LOGIN}&lt;/lastName&gt;&lt;/contact&gt;&lt;/shipper&gt;&lt;trip&gt;&lt;origin&gt;&lt;party&gt;&lt;ref&gt;ITM-QA-Sender-0002-AddressRef&lt;/ref&gt;&lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&lt;address&gt;&lt;name&gt;delivery-multy_address&lt;/name&gt;&lt;city&gt;City4&lt;/city&gt;&lt;country&gt;BE&lt;/country&gt;&lt;/address&gt;&lt;/party&gt;&lt;timing&gt;&lt;latest&gt;${PU_DATE}&lt;/latest&gt;&lt;/timing&gt;&lt;/origin&gt;&lt;destination&gt;&lt;party&gt;&lt;ref&gt;ITM-QA-WH1-DelRef&lt;/ref&gt;&lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&lt;address&gt;&lt;name&gt;delivery-multy_address&lt;/name&gt;&lt;city&gt;City4&lt;/city&gt;&lt;country&gt;BE&lt;/country&gt;&lt;/address&gt;&lt;/party&gt;&lt;timing&gt;&lt;latest&gt;${DL_DATE}&lt;/latest&gt;&lt;/timing&gt;&lt;/destination&gt;&lt;/trip&gt;&lt;order&gt;&lt;description&gt;description&lt;/description&gt;&lt;bulk&gt;false&lt;/bulk&gt;&lt;totalGrossWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/totalGrossWeight&gt;&lt;totalPallets&gt;1&lt;/totalPallets&gt;&lt;totalNetWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/totalNetWeight&gt;&lt;totalVolume&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;m3&lt;/unit&gt;&lt;/totalVolume&gt;&quot;+X+&quot;&lt;/order&gt;&lt;/deliveryData&gt;&quot;;
sb.append(DNAME+String.valueOf(i));
sb.append(&quot;,&quot;);
sb.append(&quot;ITM-QA-WH1-DelRef&quot;);
if (i!=N) sb.append(&quot;\n&quot;);
}
print(sb);
f.close();

f1 = new FileOutputStream(&quot;${COref2}&quot;, true);
p1 = new PrintStream(f1); 
this.interpreter.setOut(p1);

StringBuilder sb1 = new StringBuilder();
sb1.append(vars.get(&quot;CONAME&quot;));
print(sb1);
f1.close();

vars.put(&quot;DELVS_C&quot;, String.valueOf(N)); 
vars.put(&quot;DNAME&quot;, DNAME);
vars.put(&quot;DELIVERIES&quot;, S);
vars.put(&quot;ACTIVE&quot;,&quot;true&quot;);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor OLD" enabled="false">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang3.RandomStringUtils;

int N = ${EXPECTED_DELIVERIES_COUNT};

f = new FileOutputStream(&quot;D://1callofs23.csv&quot;, true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

String S = &quot;&quot;;
String X = &quot;&quot;;

StringBuilder sb = new StringBuilder();

String DNAME = &quot;${__time(,)}&quot;+RandomStringUtils.randomAlphanumeric(3).toUpperCase(Locale.US)+&quot;${__threadNum}&quot;;
for (int j = 1; j&lt;=N; j++)
{
	X=X+&quot;&lt;product&gt;&lt;description&gt;description&lt;/description&gt;&lt;reference&gt;reference&lt;/reference&gt;&lt;grossWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/grossWeight&gt;&lt;/product&gt;&quot;;
}
for (int i = 1; i&lt;=N; i++)
{
sb.append(vars.get(&quot;CONAME&quot;));
sb.append(&quot;,&quot;);
S=S+&quot;&lt;deliveryData&gt;&lt;deliveryRef&gt;&quot;+DNAME+String.valueOf(i)+&quot;&lt;/deliveryRef&gt;&lt;shipper&gt;&lt;ref&gt;${SH_COMP_NAME}ref&lt;/ref&gt;&lt;name&gt;${CR_COMP_NAME}&lt;/name&gt;&lt;contact&gt;&lt;firstName&gt;user&lt;/firstName&gt;&lt;lastName&gt;${SH_LOGIN}&lt;/lastName&gt;&lt;/contact&gt;&lt;/shipper&gt;&lt;trip&gt;&lt;origin&gt;&lt;party&gt;&lt;ref&gt;ITM-QA-Sender-0002-AddressRef&lt;/ref&gt;&lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&lt;address&gt;&lt;name&gt;delivery-multy_address&lt;/name&gt;&lt;city&gt;City4&lt;/city&gt;&lt;country&gt;BE&lt;/country&gt;&lt;/address&gt;&lt;/party&gt;&lt;timing&gt;&lt;latest&gt;${PU_DATE}&lt;/latest&gt;&lt;/timing&gt;&lt;/origin&gt;&lt;destination&gt;&lt;party&gt;&lt;ref&gt;ITM-QA-WH1-DelRef&lt;/ref&gt;&lt;name&gt;${SH_COMP_NAME}&lt;/name&gt;&lt;address&gt;&lt;name&gt;delivery-multy_address&lt;/name&gt;&lt;city&gt;City4&lt;/city&gt;&lt;country&gt;BE&lt;/country&gt;&lt;/address&gt;&lt;/party&gt;&lt;timing&gt;&lt;latest&gt;${DL_DATE}&lt;/latest&gt;&lt;/timing&gt;&lt;/destination&gt;&lt;/trip&gt;&lt;order&gt;&lt;description&gt;description&lt;/description&gt;&lt;bulk&gt;false&lt;/bulk&gt;&lt;totalGrossWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/totalGrossWeight&gt;&lt;totalNetWeight&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;kg&lt;/unit&gt;&lt;/totalNetWeight&gt;&lt;totalVolume&gt;&lt;quantity&gt;1&lt;/quantity&gt;&lt;unit&gt;m3&lt;/unit&gt;&lt;/totalVolume&gt;&quot;+X+&quot;&lt;/order&gt;&lt;/deliveryData&gt;&quot;;
sb.append(DNAME+String.valueOf(i));
if (i!=N) sb.append(&quot;\n&quot;);
}
print(sb);
f.close();
vars.put(&quot;DELVS_C&quot;, String.valueOf(N)); 
vars.put(&quot;DNAME&quot;, DNAME);
vars.put(&quot;DELIVERIES&quot;, S);
vars.put(&quot;ACTIVE&quot;,&quot;true&quot;);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${Host}:${PORT_CAPELLA}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic aXRtOml0bQ==</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST_XML_INCOMING" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;acceptance_status&gt;&#xd;
  &lt;version&gt;V13&lt;/version&gt;&#xd;
  &lt;contact&gt;&#xd;
    &lt;firstName&gt;user&lt;/firstName&gt;&#xd;
    &lt;lastName&gt;${CR_LOGIN}&lt;/lastName&gt;&#xd;
  &lt;/contact&gt;&#xd;
  &lt;action&gt;ACCEPT&lt;/action&gt;&#xd;
  &lt;medium&gt;ROAD&lt;/medium&gt;&#xd;
  &lt;calloffData&gt;&#xd;
    &lt;shipper&gt;&#xd;
      &lt;ref&gt;shipper-${SH_LOGIN}&lt;/ref&gt;&#xd;
      &lt;name&gt;${SH_LOGIN}&lt;/name&gt;&#xd;
    &lt;/shipper&gt;&#xd;
    &lt;carrier&gt;&#xd;
      &lt;ref&gt;carrier-${CR_LOGIN}&lt;/ref&gt;&#xd;
      &lt;name&gt;${CR_LOGIN}&lt;/name&gt;&#xd;
    &lt;/carrier&gt;&#xd;
    &lt;calloffRef&gt;${CONAME}&lt;/calloffRef&gt;&#xd;
  &lt;/calloffData&gt;&#xd;
&lt;/acceptance_status&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT_CAPELLA}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/slotv2Carr/incoming</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${Host}:${PORT_CAPELLA}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic c2xvdHYyQ2Fycjp0cmFuc3dpZGU=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Calloffs creation Time calculation" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${Loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${Ramp_for_calculation}</stringProp>
        <longProp name="ThreadGroup.start_time">1514284694000</longProp>
        <longProp name="ThreadGroup.end_time">1514284694000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${CO_REF_LIST}</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">CONAME</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Time parcing Transaction controller" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CO creation time calculation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">results=2&amp;selectedColumns=&amp;applicationName=&amp;groupName=${GROUP_NAME}&amp;partnerId=&amp;processStatus=T%2FF&amp;stage=&amp;direction=Incoming&amp;typeDirection=request&amp;typeDomain=cms&amp;typeItem=call-off&amp;typeAction=create&amp;searchType=on&amp;transportRef=${CONAME}&amp;messageRef=&amp;msgId=&amp;maxRes=25&amp;action=Search&amp;listType=report&amp;exactMsgRef=true&amp;dateFrom=&amp;dateTill=&amp;savescrollY=0&amp;savescrollX=0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host}</stringProp>
            <stringProp name="HTTPSampler.port">8080</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mikad/Message/View.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru;q=0.8,uk;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${MIKAD_AUTH_TOKEN}</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Content-Length" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">363</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">JSESSIONID=BEBDB8E0D75C78107E983D4D0458B9B8</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${Host}:8080</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://${Host}:8080</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${Hpst}:8080/mikad/Message/View.do</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Start time" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">STARTTIME</stringProp>
              <stringProp name="RegexExtractor.regex">Start Time:\n                    &lt;\/TD&gt;\n                    &lt;TD colspan=&quot;3&quot;&gt;\n                        (.*?)-(.*?)-(\d)(\d) (\d)(\d):(\d)(\d):(\d)(\d)\.(.*?)\n                    &lt;\/TD&gt;</stringProp>
              <stringProp name="RegexExtractor.template">2</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract End time" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ENDTIME</stringProp>
              <stringProp name="RegexExtractor.regex">End Time:\n                    &lt;\/TD&gt;\n                    &lt;TD colspan=&quot;3&quot;&gt;\n                        (.*?)-(.*?)-(\d)(\d) (\d)(\d):(\d)(\d):(\d)(\d)\.(.*?)\n                    &lt;\/TD&gt;</stringProp>
              <stringProp name="RegexExtractor.template">2</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="CO creation time calculation" enabled="true">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">f = new FileOutputStream(&quot;${CO_ref_w_cr_time}&quot;, true);
p = new PrintStream(f); 
this.interpreter.setOut(p);

StringBuilder sb = new StringBuilder();

int endTimeInSec =  ((${ENDTIME_g3}*10 + ${ENDTIME_g4})*86400) + ((${ENDTIME_g5}*10 + ${ENDTIME_g6})* 3600) + ((${ENDTIME_g7}*10 +${ENDTIME_g8})* 60) + ${ENDTIME_g9}*10 + ${ENDTIME_g10};
int startTimeInSec =  ((${STARTTIME_g3}*10 + ${STARTTIME_g4})*86400) + ((${STARTTIME_g5}*10 + ${STARTTIME_g6})* 3600) + ( (${STARTTIME_g7}*10 +${STARTTIME_g8})* 60) + ${STARTTIME_g9}*10 + ${STARTTIME_g10};

int time = endTimeInSec - startTimeInSec;

vars.put(&quot;COCT&quot;, String.valueOf(time));

sb.append(vars.get(&quot;CONAME&quot;));
sb.append(&quot;,&quot;);
sb.append(time);
print(sb);
f.close();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
